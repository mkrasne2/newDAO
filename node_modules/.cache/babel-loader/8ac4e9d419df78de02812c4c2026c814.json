{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport Web3 from \"web3\";\nimport web3CoreSubscriptions from \"web3-core-subscriptions\";\nimport ABIDecoder from \"web3-eth-abi\";\nimport { toHex } from \"web3-utils\";\nimport { formatBlock } from \"./util/hex\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\nimport { patchEnableCustomRPC } from \"./web3-adapter/customRPC\";\nimport { patchEthMaxPriorityFeePerGasMethod } from \"./web3-adapter/eth_maxPriorityFeePerGas\";\nimport { patchEthPrivateTransactionMethods } from \"./web3-adapter/eth_PrivateTransactions\";\nexport * from \"./alchemy-apis/types\";\nvar DEFAULT_MAX_RETRIES = 3;\nvar DEFAULT_RETRY_INTERVAL = 1000;\nvar DEFAULT_RETRY_JITTER = 250;\nvar DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\nexport function createAlchemyWeb3(alchemyUrl, config) {\n  var fullConfig = fillInConfigDefaults(config);\n\n  var _a = makeAlchemyContext(alchemyUrl, fullConfig),\n      provider = _a.provider,\n      jsonRpcSenders = _a.jsonRpcSenders,\n      restSender = _a.restSender,\n      setWriteProvider = _a.setWriteProvider;\n\n  var alchemyWeb3 = new Web3(provider);\n\n  alchemyWeb3.setProvider = function () {\n    throw new Error(\"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\");\n  };\n\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n\n  function getNfts(params, callback) {\n    return callAlchemyRestEndpoint({\n      restSender: restSender,\n      callback: callback,\n      params: params,\n      path: \"/v1/getNFTs/\"\n    });\n  }\n\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params]\n      });\n    },\n    getTokenBalances: function (address, contractAddresses, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],\n        processResponse: processTokenBalanceResponse\n      });\n    },\n    getTokenMetadata: function (address, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\"\n      });\n    },\n    getAssetTransfers: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        params: [__assign(__assign({}, params), {\n          fromBlock: params.fromBlock != null ? formatBlock(params.fromBlock) : undefined,\n          toBlock: params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n          maxCount: params.maxCount != null ? toHex(params.maxCount) : undefined\n        })],\n        method: \"alchemy_getAssetTransfers\"\n      });\n    },\n    getNftMetadata: function (params, callback) {\n      return callAlchemyRestEndpoint({\n        restSender: restSender,\n        callback: callback,\n        params: params,\n        path: \"/v1/getNFTMetadata/\"\n      });\n    },\n    getNfts: getNfts,\n    getTransactionReceipts: function (params, callback) {\n      return callAlchemyJsonRpcMethod({\n        jsonRpcSenders: jsonRpcSenders,\n        callback: callback,\n        method: \"alchemy_getTransactionReceipts\",\n        params: [params]\n      });\n    }\n  };\n  patchSubscriptions(alchemyWeb3);\n  patchEnableCustomRPC(alchemyWeb3);\n  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);\n  patchEthPrivateTransactionMethods(alchemyWeb3);\n  return alchemyWeb3;\n}\n\nfunction fillInConfigDefaults(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.writeProvider,\n      writeProvider = _c === void 0 ? getWindowProvider() : _c,\n      _d = _b.jsonRpcSenderMiddlewares,\n      jsonRpcSenderMiddlewares = _d === void 0 ? [] : _d,\n      _e = _b.maxRetries,\n      maxRetries = _e === void 0 ? DEFAULT_MAX_RETRIES : _e,\n      _f = _b.retryInterval,\n      retryInterval = _f === void 0 ? DEFAULT_RETRY_INTERVAL : _f,\n      _g = _b.retryJitter,\n      retryJitter = _g === void 0 ? DEFAULT_RETRY_JITTER : _g;\n\n  return {\n    writeProvider: writeProvider,\n    jsonRpcSenderMiddlewares: jsonRpcSenderMiddlewares,\n    maxRetries: maxRetries,\n    retryInterval: retryInterval,\n    retryJitter: retryJitter\n  };\n}\n\nfunction getWindowProvider() {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\nfunction callAlchemyJsonRpcMethod(_a) {\n  var _this = this;\n\n  var jsonRpcSenders = _a.jsonRpcSenders,\n      method = _a.method,\n      params = _a.params,\n      _b = _a.callback,\n      callback = _b === void 0 ? noop : _b,\n      _c = _a.processResponse,\n      processResponse = _c === void 0 ? identity : _c;\n\n  var promise = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jsonRpcSenders.send(method, params)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , processResponse(result)];\n        }\n      });\n    });\n  }();\n\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction callAlchemyRestEndpoint(_a) {\n  var _this = this;\n\n  var restSender = _a.restSender,\n      path = _a.path,\n      params = _a.params,\n      _b = _a.callback,\n      callback = _b === void 0 ? noop : _b,\n      _c = _a.processResponse,\n      processResponse = _c === void 0 ? identity : _c;\n  var fixedParams = fixArrayQueryParams(params);\n\n  var promise = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , restSender.sendRestPayload(path, fixedParams)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , processResponse(result)];\n        }\n      });\n    });\n  }();\n\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(rawResponse) {\n  // Convert token balance fields from hex-string to decimal-string.\n  var fixedTokenBalances = rawResponse.tokenBalances.map(function (balance) {\n    return balance.tokenBalance != null ? __assign(__assign({}, balance), {\n      tokenBalance: ABIDecoder.decodeParameter(\"uint256\", balance.tokenBalance)\n    }) : balance;\n  });\n  return __assign(__assign({}, rawResponse), {\n    tokenBalances: fixedTokenBalances\n  });\n}\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */\n\n\nfunction patchSubscriptions(web3) {\n  var eth = web3.eth;\n  var oldSubscribe = eth.subscribe.bind(eth);\n\n  eth.subscribe = function (type) {\n    var rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      rest[_i - 1] = arguments[_i];\n    }\n\n    if (type === \"alchemy_fullPendingTransactions\" || type === \"alchemy_newFullPendingTransactions\") {\n      return suppressNoSubscriptionExistsWarning(function () {\n        return oldSubscribe.apply(void 0, __spreadArray([\"alchemy_newFullPendingTransactions\"], __read(rest)));\n      });\n    }\n\n    if (type === \"alchemy_filteredNewFullPendingTransactions\" || type === \"alchemy_filteredPendingTransactions\" || type === \"alchemy_filteredFullPendingTransactions\") {\n      return suppressNoSubscriptionExistsWarning(function () {\n        return oldSubscribe.apply(void 0, __spreadArray([\"alchemy_filteredNewFullPendingTransactions\"], __read(rest)));\n      });\n    }\n\n    return oldSubscribe.apply(void 0, __spreadArray([type], __read(rest)));\n  };\n}\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\n\n\nfunction suppressNoSubscriptionExistsWarning(f) {\n  var oldConsoleWarn = console.warn;\n\n  console.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (typeof args[0] === \"string\" && args[0].includes(\" doesn't exist. Subscribing anyway.\")) {\n      return;\n    }\n\n    return oldConsoleWarn.apply(console, args);\n  };\n\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */\n\n\nvar subscription = web3CoreSubscriptions.subscription;\nvar oldSubscriptionPrototypeValidateArgs = subscription.prototype._validateArgs;\n\nsubscription.prototype._validateArgs = function (args) {\n  if ([\"alchemy_filteredNewFullPendingTransactions\", \"alchemy_filteredPendingTransactions\", \"alchemy_filteredFullPendingTransactions\"].includes(this.subscriptionMethod)) {// This particular subscription type is allowed to have additional parameters\n  } else {\n    if ([\"alchemy_fullPendingTransactions\", \"alchemy_newFullPendingTransactions\"].includes(this.subscriptionMethod)) {\n      if (this.options.subscription) {\n        this.options.subscription.subscriptionName = this.subscriptionMethod;\n      }\n    }\n\n    var validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n    validator(args);\n  }\n};\n\nfunction noop() {// Nothing.\n}\n\nfunction identity(x) {\n  return x;\n}\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */\n\n\nfunction fixArrayQueryParams(params) {\n  var result = {};\n  Object.keys(params).forEach(function (key) {\n    var value = params[key];\n    var fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n    result[fixedKey] = value;\n  });\n  return result;\n}\n\nfunction toArrayKey(key) {\n  return endsWith(key, \"[]\") ? key : key + \"[]\";\n}\n/**\n * Like `String#endsWith`, for older environments.\n */\n\n\nfunction endsWith(s, ending) {\n  var index = s.lastIndexOf(ending);\n  return index >= 0 && index === s.length - ending.length;\n}","map":{"version":3,"mappings":";AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,OAAOC,qBAAP,MAAoD,yBAApD;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,KAAT,QAAsB,YAAtB;AAyBA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,kCAAT,QAAmD,yCAAnD;AACA,SAASC,iCAAT,QAAkD,wCAAlD;AAGA,cAAc,sBAAd;AAEA,IAAMC,mBAAmB,GAAG,CAA5B;AACA,IAAMC,sBAAsB,GAAG,IAA/B;AACA,IAAMC,oBAAoB,GAAG,GAA7B;AACA,IAAMC,wBAAwB,GAAG,gBAAjC;AA6GA,OAAM,SAAUC,iBAAV,CACJC,UADI,EAEJC,MAFI,EAEsB;EAE1B,IAAMC,UAAU,GAAGC,oBAAoB,CAACF,MAAD,CAAvC;;EACM,SACJV,kBAAkB,CAACS,UAAD,EAAaE,UAAb,CADd;EAAA,IAAEE,QAAQ,cAAV;EAAA,IAAYC,cAAc,oBAA1B;EAAA,IAA4BC,UAAU,gBAAtC;EAAA,IAAwCC,gBAAgB,sBAAxD;;EAEN,IAAMC,WAAW,GAAG,IAAIvB,IAAJ,CAASmB,QAAT,CAApB;;EACAI,WAAW,CAACC,WAAZ,GAA0B;IACxB,MAAM,IAAIC,KAAJ,CACJ,uHADI,CAAN;EAGD,CAJD;;EAKAF,WAAW,CAACD,gBAAZ,GAA+BA,gBAA/B;;EAWA,SAASI,OAAT,CACEC,MADF,EAEEC,QAFF,EAImC;IAEjC,OAAOC,uBAAuB,CAAC;MAC7BR,UAAU,YADmB;MAE7BO,QAAQ,UAFqB;MAG7BD,MAAM,QAHuB;MAI7BG,IAAI,EAAE;IAJuB,CAAD,CAA9B;EAMD;;EAEDP,WAAW,CAACQ,OAAZ,GAAsB;IACpBC,iBAAiB,EAAE,UAACL,MAAD,EAA+BC,QAA/B,EAAuC;MACxD,+BAAwB,CAAC;QACvBR,cAAc,gBADS;QAEvBQ,QAAQ,UAFe;QAGvBK,MAAM,EAAE,2BAHe;QAIvBN,MAAM,EAAE,CAACA,MAAD;MAJe,CAAD,CAAxB;IAKE,CAPgB;IAQpBO,gBAAgB,EAAE,UAACC,OAAD,EAAUC,iBAAV,EAA6BR,QAA7B,EAAqC;MACrD,+BAAwB,CAAC;QACvBR,cAAc,gBADS;QAEvBQ,QAAQ,UAFe;QAGvBK,MAAM,EAAE,0BAHe;QAIvBN,MAAM,EAAE,CAACQ,OAAD,EAAUC,iBAAiB,IAAIvB,wBAA/B,CAJe;QAKvBwB,eAAe,EAAEC;MALM,CAAD,CAAxB;IAME,CAfgB;IAgBpBC,gBAAgB,EAAE,UAACJ,OAAD,EAAUP,QAAV,EAAkB;MAClC,+BAAwB,CAAC;QACvBR,cAAc,gBADS;QAEvBQ,QAAQ,UAFe;QAGvBD,MAAM,EAAE,CAACQ,OAAD,CAHe;QAIvBF,MAAM,EAAE;MAJe,CAAD,CAAxB;IAKE,CAtBgB;IAuBpBO,iBAAiB,EAAE,UAACb,MAAD,EAA+BC,QAA/B,EAAuC;MACxD,+BAAwB,CAAC;QACvBR,cAAc,gBADS;QAEvBQ,QAAQ,UAFe;QAGvBD,MAAM,EAAE,uBAEDA,SAAM;UACTc,SAAS,EACPd,MAAM,CAACc,SAAP,IAAoB,IAApB,GACIrC,WAAW,CAACuB,MAAM,CAACc,SAAR,CADf,GAEIC,SAJG;UAKTC,OAAO,EACLhB,MAAM,CAACgB,OAAP,IAAkB,IAAlB,GAAyBvC,WAAW,CAACuB,MAAM,CAACgB,OAAR,CAApC,GAAuDD,SANhD;UAOTE,QAAQ,EACNjB,MAAM,CAACiB,QAAP,IAAmB,IAAnB,GAA0BzC,KAAK,CAACwB,MAAM,CAACiB,QAAR,CAA/B,GAAmDF;QAR5C,EAFL,CAHe;QAgBvBT,MAAM,EAAE;MAhBe,CAAD,CAAxB;IAiBE,CAzCgB;IA0CpBY,cAAc,EAAE,UAAClB,MAAD,EAA+BC,QAA/B,EAAuC;MACrD,8BAAuB,CAAC;QACtBP,UAAU,YADY;QAEtBO,QAAQ,UAFc;QAGtBD,MAAM,QAHgB;QAItBG,IAAI,EAAE;MAJgB,CAAD,CAAvB;IAKE,CAhDgB;IAiDpBJ,OAAO,SAjDa;IAkDpBoB,sBAAsB,EAAE,UAACnB,MAAD,EAAoCC,QAApC,EAA4C;MAClE,+BAAwB,CAAC;QACvBR,cAAc,gBADS;QAEvBQ,QAAQ,UAFe;QAGvBK,MAAM,EAAE,gCAHe;QAIvBN,MAAM,EAAE,CAACA,MAAD;MAJe,CAAD,CAAxB;IAKE;EAxDgB,CAAtB;EA0DAoB,kBAAkB,CAACxB,WAAD,CAAlB;EACAhB,oBAAoB,CAACgB,WAAD,CAApB;EACAf,kCAAkC,CAACe,WAAD,CAAlC;EACAd,iCAAiC,CAACc,WAAD,CAAjC;EACA,OAAOA,WAAP;AACD;;AAED,SAASL,oBAAT,CAA8B8B,EAA9B,EAMyB;MANKC,qBAMP,EANO,GAMLD;MALvBE;MAAAC,aAAa,mBAAGC,iBAAiB,EAApB,GAAsBF;MACnCG;MAAAC,wBAAwB,mBAAG,EAAH,GAAKD;MAC7BE;MAAAC,UAAU,mBAAG9C,mBAAH,GAAsB6C;MAChCE;MAAAC,aAAa,mBAAG/C,sBAAH,GAAyB8C;MACtCE;MAAAC,WAAW,mBAAGhD,oBAAH,GAAuB+C;;EAElC,OAAO;IACLR,aAAa,eADR;IAELG,wBAAwB,0BAFnB;IAGLE,UAAU,YAHL;IAILE,aAAa,eAJR;IAKLE,WAAW;EALN,CAAP;AAOD;;AAED,SAASR,iBAAT,GAA0B;EACxB,OAAO,OAAOS,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAACC,QAAvC,GAAkD,IAAzD;AACD;;AAkBD,SAASC,wBAAT,CAAqCf,EAArC,EAMoC;EANpC;;MACE5B,cAAc;MACda,MAAM;MACNN,MAAM;MACNsB;MAAArB,QAAQ,mBAAGoC,IAAH,GAAOf;MACfC;MAAAb,eAAe,mBAAG4B,QAAH,GAAWf;;EAE1B,IAAMgB,OAAO,GAAI;IAAA;;;;;YACA;YAAA;YAAA,EAAM9C,cAAc,CAAC+C,IAAf,CAAoBlC,MAApB,EAA4BN,MAA5B,CAAN;;;YAATyC,MAAM,GAAGpB,SAAT;YACN;YAAA;YAAA,EAAOX,eAAe,CAAC+B,MAAD,CAAtB;;;KAFe;EAGhB,CAHe,EAAhB;;EAIA/D,YAAY,CAAC6D,OAAD,EAAUtC,QAAV,CAAZ;EACA,OAAOsC,OAAP;AACD;;AAED,SAASrC,uBAAT,CAAoCmB,EAApC,EAM6B;EAN7B;;MACE3B,UAAU;MACVS,IAAI;MACJH,MAAM;MACNsB;MAAArB,QAAQ,mBAAGoC,IAAH,GAAOf;MACfC;MAAAb,eAAe,mBAAG4B,QAAH,GAAWf;EAE1B,IAAMmB,WAAW,GAAGC,mBAAmB,CAAC3C,MAAD,CAAvC;;EACA,IAAMuC,OAAO,GAAI;IAAA;;;;;YACA;YAAA;YAAA,EAAM7C,UAAU,CAACkD,eAAX,CAA2BzC,IAA3B,EAAiCuC,WAAjC,CAAN;;;YAATD,MAAM,GAAGpB,SAAT;YACN;YAAA;YAAA,EAAOX,eAAe,CAAC+B,MAAD,CAAtB;;;KAFe;EAGhB,CAHe,EAAhB;;EAIA/D,YAAY,CAAC6D,OAAD,EAAUtC,QAAV,CAAZ;EACA,OAAOsC,OAAP;AACD;;AAED,SAAS5B,2BAAT,CACEkC,WADF,EACoC;EAElC;EACA,IAAMC,kBAAkB,GAAGD,WAAW,CAACE,aAAZ,CAA0BC,GAA1B,CAA8B,UAACC,OAAD,EAAQ;IAC/D,cAAO,CAACC,YAAR,IAAwB,IAAxB,GACGC,sBACMF,OADN,GACa;MACVC,YAAY,EAAE3E,UAAU,CAAC6E,eAAX,CACZ,SADY,EAEZH,OAAO,CAACC,YAFI;IADJ,CADb,CADH,GAQID,OARJ;EAQW,CATc,CAA3B;EAWA,6BAAYJ,WAAZ,GAAuB;IAAEE,aAAa,EAAED;EAAjB,CAAvB;AACD;AAED;;;;;;;;AAMA,SAAS1B,kBAAT,CAA4BiC,IAA5B,EAAsC;EAC5B,OAAG,GAAKA,IAAI,IAAZ;EACR,IAAMC,YAAY,GAAGC,GAAG,CAACC,SAAJ,CAAcC,IAAd,CAAmBF,GAAnB,CAArB;;EACAA,GAAG,CAACC,SAAJ,GAAiB,UAACE,IAAD,EAAa;IAAE;;SAAA,yCAAc;MAAdC;;;IAC9B,IACED,IAAI,KAAK,iCAAT,IACAA,IAAI,KAAK,oCAFX,EAGE;MACA,OAAOE,mCAAmC,CAAC;QACzC,mBAAY,MAAZ,CAAY,MAAZ,EAAYC,eAAC,oCAAD,GAA4CC,OAAKH,IAAL,CAA5C,CAAZ;MAAkE,CAD1B,CAA1C;IAGD;;IACD,IACED,IAAI,KAAK,4CAAT,IACAA,IAAI,KAAK,qCADT,IAEAA,IAAI,KAAK,yCAHX,EAIE;MACA,OAAOE,mCAAmC,CAAC;QACzC,mBAAY,MAAZ,CAAY,MAAZ,EAAYC,eACV,4CADU,GACyCC,OAChDH,IADgD,CADzC,CAAZ;MAGC,CAJuC,CAA1C;IAMD;;IACD,OAAOL,YAAY,MAAZ,CAAY,MAAZ,EAAYO,eAACH,IAAD,GAAYI,OAAKH,IAAL,CAAZ,CAAZ,CAAP;EACD,CAtBD;AAuBD;AAED;;;;;;AAIA,SAASC,mCAAT,CAAgDG,CAAhD,EAA0D;EACxD,IAAMC,cAAc,GAAGC,OAAO,CAACC,IAA/B;;EACAD,OAAO,CAACC,IAAR,GAAe;IAAC;;SAAA,yCAAkB;MAAlBC;;;IACd,IACE,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAnB,IACAA,IAAI,CAAC,CAAD,CAAJ,CAAQC,QAAR,CAAiB,qCAAjB,CAFF,EAGE;MACA;IACD;;IACD,OAAOJ,cAAc,CAACK,KAAf,CAAqBJ,OAArB,EAA8BE,IAA9B,CAAP;EACD,CARD;;EASA,IAAI;IACF,OAAOJ,CAAC,EAAR;EACD,CAFD,SAEU;IACRE,OAAO,CAACC,IAAR,GAAeF,cAAf;EACD;AACF;AAED;;;;;;AAIQ,gBAAY,GAAK1F,qBAA4B,aAA7C;AACR,IAAMgG,oCAAoC,GACxCC,YAAY,CAACC,SAAb,CAAuBC,aADzB;;AAEAF,YAAY,CAACC,SAAb,CAAuBC,aAAvB,GAAuC,UAAUN,IAAV,EAAmB;EACxD,IACE,CACE,4CADF,EAEE,qCAFF,EAGE,yCAHF,EAIEC,QAJF,CAIW,KAAKM,kBAJhB,CADF,EAME,CACA;EACD,CARD,MAQO;IACL,IACE,CACE,iCADF,EAEE,oCAFF,EAGEN,QAHF,CAGW,KAAKM,kBAHhB,CADF,EAKE;MACA,IAAI,KAAKC,OAAL,CAAaJ,YAAjB,EAA+B;QAC7B,KAAKI,OAAL,CAAaJ,YAAb,CAA0BK,gBAA1B,GAA6C,KAAKF,kBAAlD;MACD;IACF;;IAED,IAAMG,SAAS,GAAGP,oCAAoC,CAACb,IAArC,CAA0C,IAA1C,CAAlB;IACAoB,SAAS,CAACV,IAAD,CAAT;EACD;AACF,CAxBD;;AA0BA,SAAS9B,IAAT,GAAa,CACX;AACD;;AAED,SAASC,QAAT,CAAqBwC,CAArB,EAAyB;EACvB,OAAOA,CAAP;AACD;AAED;;;;;;AAIA,SAASnC,mBAAT,CAA6B3C,MAA7B,EAAwD;EACtD,IAAMyC,MAAM,GAAwB,EAApC;EACAsC,MAAM,CAACC,IAAP,CAAYhF,MAAZ,EAAoBiF,OAApB,CAA4B,UAACC,GAAD,EAAI;IAC9B,IAAMC,KAAK,GAAGnF,MAAM,CAACkF,GAAD,CAApB;IACA,IAAME,QAAQ,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBI,UAAU,CAACL,GAAD,CAAjC,GAAyCA,GAA1D;IACAzC,MAAM,CAAC2C,QAAD,CAAN,GAAmBD,KAAnB;EACD,CAJD;EAKA,OAAO1C,MAAP;AACD;;AAED,SAAS8C,UAAT,CAAoBL,GAApB,EAA+B;EAC7B,OAAOM,QAAQ,CAACN,GAAD,EAAM,IAAN,CAAR,GAAsBA,GAAtB,GAA+BA,GAAG,OAAzC;AACD;AAED;;;;;AAGA,SAASM,QAAT,CAAkBC,CAAlB,EAA6BC,MAA7B,EAA2C;EACzC,IAAMC,KAAK,GAAGF,CAAC,CAACG,WAAF,CAAcF,MAAd,CAAd;EACA,OAAOC,KAAK,IAAI,CAAT,IAAcA,KAAK,KAAKF,CAAC,CAACI,MAAF,GAAWH,MAAM,CAACG,MAAjD;AACD","names":["Web3","web3CoreSubscriptions","ABIDecoder","toHex","formatBlock","callWhenDone","makeAlchemyContext","patchEnableCustomRPC","patchEthMaxPriorityFeePerGasMethod","patchEthPrivateTransactionMethods","DEFAULT_MAX_RETRIES","DEFAULT_RETRY_INTERVAL","DEFAULT_RETRY_JITTER","DEFAULT_CONTRACT_ADDRESS","createAlchemyWeb3","alchemyUrl","config","fullConfig","fillInConfigDefaults","provider","jsonRpcSenders","restSender","setWriteProvider","alchemyWeb3","setProvider","Error","getNfts","params","callback","callAlchemyRestEndpoint","path","alchemy","getTokenAllowance","method","getTokenBalances","address","contractAddresses","processResponse","processTokenBalanceResponse","getTokenMetadata","getAssetTransfers","fromBlock","undefined","toBlock","maxCount","getNftMetadata","getTransactionReceipts","patchSubscriptions","_a","_b","_c","writeProvider","getWindowProvider","_d","jsonRpcSenderMiddlewares","_e","maxRetries","_f","retryInterval","_g","retryJitter","window","ethereum","callAlchemyJsonRpcMethod","noop","identity","promise","send","result","fixedParams","fixArrayQueryParams","sendRestPayload","rawResponse","fixedTokenBalances","tokenBalances","map","balance","tokenBalance","__assign","decodeParameter","web3","oldSubscribe","eth","subscribe","bind","type","rest","suppressNoSubscriptionExistsWarning","__spreadArray","__read","f","oldConsoleWarn","console","warn","args","includes","apply","oldSubscriptionPrototypeValidateArgs","subscription","prototype","_validateArgs","subscriptionMethod","options","subscriptionName","validator","x","Object","keys","forEach","key","value","fixedKey","Array","isArray","toArrayKey","endsWith","s","ending","index","lastIndexOf","length"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/@alch/alchemy-web3/src/index.ts"],"sourcesContent":["import Web3 from \"web3\";\nimport { Log, LogsOptions, Transaction } from \"web3-core\";\nimport web3CoreSubscriptions, { Subscription } from \"web3-core-subscriptions\";\nimport { BlockHeader, Eth, Syncing } from \"web3-eth\";\nimport ABIDecoder from \"web3-eth-abi\";\nimport { toHex } from \"web3-utils\";\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  GetNftMetadataParams,\n  GetNftMetadataResponse,\n  GetNftsParams,\n  GetNftsParamsWithoutMetadata,\n  GetNftsResponse,\n  GetNftsResponseWithoutMetadata,\n  PrivateTransactionPreferences,\n  TokenAllowanceParams,\n  TokenAllowanceResponse,\n  TokenBalancesResponse,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse,\n} from \"./alchemy-apis/types\";\nimport {\n  AlchemyWeb3Config,\n  FullConfig,\n  Provider,\n  TransactionsOptions,\n  Web3Callback,\n} from \"./types\";\nimport { formatBlock } from \"./util/hex\";\nimport { JsonRpcSenders } from \"./util/jsonRpc\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\nimport { patchEnableCustomRPC } from \"./web3-adapter/customRPC\";\nimport { patchEthMaxPriorityFeePerGasMethod } from \"./web3-adapter/eth_maxPriorityFeePerGas\";\nimport { patchEthPrivateTransactionMethods } from \"./web3-adapter/eth_PrivateTransactions\";\nimport { RestPayloadSender } from \"./web3-adapter/sendRestPayload\";\n\nexport * from \"./alchemy-apis/types\";\n\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULT_RETRY_INTERVAL = 1000;\nconst DEFAULT_RETRY_JITTER = 250;\nconst DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\n\nexport interface AlchemyWeb3 extends Web3 {\n  alchemy: AlchemyMethods;\n  eth: AlchemyEth;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport interface AlchemyMethods {\n  getTokenAllowance(\n    params: TokenAllowanceParams,\n    callback?: Web3Callback<TokenAllowanceResponse>,\n  ): Promise<TokenAllowanceResponse>;\n  getTokenBalances(\n    address: string,\n    contractAddresses?: string[],\n    callback?: Web3Callback<TokenBalancesResponse>,\n  ): Promise<TokenBalancesResponse>;\n  getTokenMetadata(\n    address: string,\n    callback?: Web3Callback<TokenMetadataResponse>,\n  ): Promise<TokenMetadataResponse>;\n  getAssetTransfers(\n    params: AssetTransfersParams,\n    callback?: Web3Callback<AssetTransfersResponse>,\n  ): Promise<AssetTransfersResponse>;\n  getNftMetadata(\n    params: GetNftMetadataParams,\n    callback?: Web3Callback<GetNftMetadataResponse>,\n  ): Promise<GetNftMetadataResponse>;\n  getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  getTransactionReceipts(\n    params: TransactionReceiptsParams,\n    callback?: Web3Callback<TransactionReceiptsResponse>,\n  ): Promise<TransactionReceiptsResponse>;\n}\n\n/**\n * Same as Eth, but with `subscribe` allowing more types.\n */\nexport interface AlchemyEth extends Eth {\n  subscribe(\n    type: \"logs\",\n    options?: LogsOptions,\n    callback?: (error: Error, log: Log) => void,\n  ): Subscription<Log>;\n  subscribe(\n    type: \"syncing\",\n    callback?: (error: Error, result: Syncing) => void,\n  ): Subscription<Syncing>;\n  subscribe(\n    type: \"newBlockHeaders\",\n    callback?: (error: Error, blockHeader: BlockHeader) => void,\n  ): Subscription<BlockHeader>;\n  subscribe(\n    type: \"pendingTransactions\",\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_fullPendingTransactions\",\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type: \"alchemy_filteredFullPendingTransactions\",\n    options?: TransactionsOptions,\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type:\n      | \"pendingTransactions\"\n      | \"logs\"\n      | \"syncing\"\n      | \"newBlockHeaders\"\n      | \"alchemy_fullPendingTransactions\"\n      | \"alchemy_filteredFullPendingTransactions\",\n    options?: null | LogsOptions | TransactionsOptions,\n    callback?: (\n      error: Error,\n      item: Log | Syncing | BlockHeader | string | Transaction,\n    ) => void,\n  ): Subscription<Log | BlockHeader | Syncing | string>;\n  getMaxPriorityFeePerGas(\n    callback?: (error: Error, fee: string) => void,\n  ): Promise<string>;\n  sendPrivateTransaction(\n    tx: string,\n    maxBlockNumber?: string,\n    preferences?: PrivateTransactionPreferences,\n    callback?: (error: Error, hash: string) => void,\n  ): Promise<string>;\n  cancelPrivateTransaction(\n    txHash: string,\n    callback?: (error: Error, result: boolean) => void,\n  ): Promise<boolean>;\n}\n\ninterface EthereumWindow extends Window {\n  ethereum?: any;\n}\n\ndeclare const window: EthereumWindow;\n\nexport function createAlchemyWeb3(\n  alchemyUrl: string,\n  config?: AlchemyWeb3Config,\n): AlchemyWeb3 {\n  const fullConfig = fillInConfigDefaults(config);\n  const { provider, jsonRpcSenders, restSender, setWriteProvider } =\n    makeAlchemyContext(alchemyUrl, fullConfig);\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\n  alchemyWeb3.setProvider = () => {\n    throw new Error(\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\n    );\n  };\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n\n  // Define function separately in order to allow for overloads.\n  function getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  function getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  function getNfts(\n    params: GetNftsParams | GetNftsParamsWithoutMetadata,\n    callback?:\n      | Web3Callback<GetNftsResponseWithoutMetadata>\n      | Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse | GetNftsResponseWithoutMetadata> {\n    return callAlchemyRestEndpoint({\n      restSender,\n      callback,\n      params,\n      path: \"/v1/getNFTs/\",\n    });\n  }\n\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params],\n      }),\n    getTokenBalances: (address, contractAddresses, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],\n        processResponse: processTokenBalanceResponse,\n      }),\n    getTokenMetadata: (address, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\",\n      }),\n    getAssetTransfers: (params: AssetTransfersParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [\n          {\n            ...params,\n            fromBlock:\n              params.fromBlock != null\n                ? formatBlock(params.fromBlock)\n                : undefined,\n            toBlock:\n              params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n            maxCount:\n              params.maxCount != null ? toHex(params.maxCount) : undefined,\n          },\n        ],\n        method: \"alchemy_getAssetTransfers\",\n      }),\n    getNftMetadata: (params: GetNftMetadataParams, callback) =>\n      callAlchemyRestEndpoint({\n        restSender,\n        callback,\n        params,\n        path: \"/v1/getNFTMetadata/\",\n      }),\n    getNfts,\n    getTransactionReceipts: (params: TransactionReceiptsParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTransactionReceipts\",\n        params: [params],\n      }),\n  };\n  patchSubscriptions(alchemyWeb3);\n  patchEnableCustomRPC(alchemyWeb3);\n  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);\n  patchEthPrivateTransactionMethods(alchemyWeb3);\n  return alchemyWeb3;\n}\n\nfunction fillInConfigDefaults({\n  writeProvider = getWindowProvider(),\n  jsonRpcSenderMiddlewares = [],\n  maxRetries = DEFAULT_MAX_RETRIES,\n  retryInterval = DEFAULT_RETRY_INTERVAL,\n  retryJitter = DEFAULT_RETRY_JITTER,\n}: AlchemyWeb3Config = {}): FullConfig {\n  return {\n    writeProvider,\n    jsonRpcSenderMiddlewares,\n    maxRetries,\n    retryInterval,\n    retryJitter,\n  };\n}\n\nfunction getWindowProvider(): Provider | null {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\ninterface CallAlchemyJsonRpcMethodParams<T> {\n  jsonRpcSenders: JsonRpcSenders;\n  method: string;\n  params: any[];\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\ninterface CallAlchemyRestEndpoint<T> {\n  restSender: RestPayloadSender;\n  path: string;\n  params: Record<string, any>;\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\nfunction callAlchemyJsonRpcMethod<T>({\n  jsonRpcSenders,\n  method,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyJsonRpcMethodParams<T>): Promise<T> {\n  const promise = (async () => {\n    const result = await jsonRpcSenders.send(method, params);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction callAlchemyRestEndpoint<T>({\n  restSender,\n  path,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyRestEndpoint<T>): Promise<T> {\n  const fixedParams = fixArrayQueryParams(params);\n  const promise = (async () => {\n    const result = await restSender.sendRestPayload(path, fixedParams);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(\n  rawResponse: TokenBalancesResponse,\n): TokenBalancesResponse {\n  // Convert token balance fields from hex-string to decimal-string.\n  const fixedTokenBalances = rawResponse.tokenBalances.map((balance) =>\n    balance.tokenBalance != null\n      ? {\n          ...balance,\n          tokenBalance: ABIDecoder.decodeParameter(\n            \"uint256\",\n            balance.tokenBalance,\n          ),\n        }\n      : balance,\n  );\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\n}\n\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */\nfunction patchSubscriptions(web3: Web3): void {\n  const { eth } = web3;\n  const oldSubscribe = eth.subscribe.bind(eth);\n  eth.subscribe = ((type: string, ...rest: any[]) => {\n    if (\n      type === \"alchemy_fullPendingTransactions\" ||\n      type === \"alchemy_newFullPendingTransactions\"\n    ) {\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_newFullPendingTransactions\" as any, ...rest),\n      );\n    }\n    if (\n      type === \"alchemy_filteredNewFullPendingTransactions\" ||\n      type === \"alchemy_filteredPendingTransactions\" ||\n      type === \"alchemy_filteredFullPendingTransactions\"\n    ) {\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\n          \"alchemy_filteredNewFullPendingTransactions\" as any,\n          ...rest,\n        ),\n      );\n    }\n    return oldSubscribe(type as any, ...rest);\n  }) as any;\n}\n\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\nfunction suppressNoSubscriptionExistsWarning<T>(f: () => T): T {\n  const oldConsoleWarn = console.warn;\n  console.warn = (...args: unknown[]) => {\n    if (\n      typeof args[0] === \"string\" &&\n      args[0].includes(\" doesn't exist. Subscribing anyway.\")\n    ) {\n      return;\n    }\n    return oldConsoleWarn.apply(console, args);\n  };\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */\nconst { subscription } = web3CoreSubscriptions as any;\nconst oldSubscriptionPrototypeValidateArgs =\n  subscription.prototype._validateArgs;\nsubscription.prototype._validateArgs = function (args: any) {\n  if (\n    [\n      \"alchemy_filteredNewFullPendingTransactions\",\n      \"alchemy_filteredPendingTransactions\",\n      \"alchemy_filteredFullPendingTransactions\",\n    ].includes(this.subscriptionMethod)\n  ) {\n    // This particular subscription type is allowed to have additional parameters\n  } else {\n    if (\n      [\n        \"alchemy_fullPendingTransactions\",\n        \"alchemy_newFullPendingTransactions\",\n      ].includes(this.subscriptionMethod)\n    ) {\n      if (this.options.subscription) {\n        this.options.subscription.subscriptionName = this.subscriptionMethod;\n      }\n    }\n\n    const validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n    validator(args);\n  }\n};\n\nfunction noop(): void {\n  // Nothing.\n}\n\nfunction identity<T>(x: T): T {\n  return x;\n}\n\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */\nfunction fixArrayQueryParams(params: Record<string, any>): Record<string, any> {\n  const result: Record<string, any> = {};\n  Object.keys(params).forEach((key) => {\n    const value = params[key];\n    const fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n    result[fixedKey] = value;\n  });\n  return result;\n}\n\nfunction toArrayKey(key: string): string {\n  return endsWith(key, \"[]\") ? key : `${key}[]`;\n}\n\n/**\n * Like `String#endsWith`, for older environments.\n */\nfunction endsWith(s: string, ending: string): boolean {\n  const index = s.lastIndexOf(ending);\n  return index >= 0 && index === s.length - ending.length;\n}\n"]},"metadata":{},"sourceType":"module"}
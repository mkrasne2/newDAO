{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { delay } from \"../util/promises\";\nexport function makeRestPayloadSender(_a) {\n  var _this = this;\n\n  var url = _a.url,\n      config = _a.config; // The rest payload sender only works for alchemy.com http endpoints.\n\n  var error;\n\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n\n  if (!url.includes(\"alchemy\")) {\n    error = \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error = \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  } // Don't use the native `URL` class for this. It doesn't work in React Native.\n\n\n  var urlObject = new URI(url);\n  var origin = urlObject.origin();\n  var pathname = urlObject.path();\n  var apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n  var fetch = fetchPonyfill().fetch;\n\n  var sendRestPayload = function (path, payload) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var maxRetries, retryInterval, retryJitter, endpoint, i, response, status_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (error) {\n              throw new Error(error);\n            }\n\n            maxRetries = config.maxRetries, retryInterval = config.retryInterval, retryJitter = config.retryJitter;\n            if (!(origin && apiKey)) return [3\n            /*break*/\n            , 6];\n            endpoint = new URI(origin).search(payload).path(apiKey + path).toString();\n            i = 0;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < maxRetries + 1)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , fetch(endpoint)];\n\n          case 2:\n            response = _a.sent();\n            status_1 = response.status;\n\n            switch (status_1) {\n              case 200:\n                return [2\n                /*return*/\n                , response.json()];\n\n              case 429:\n                break;\n\n              default:\n                throw new Error(response.status + \":\" + response.statusText);\n            }\n\n            return [4\n            /*yield*/\n            , delay(retryInterval + (retryJitter * Math.random() | 0))];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n\n          case 6:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  return {\n    sendRestPayload: sendRestPayload\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,KAAT,QAAsB,kBAAtB;AAgBA,OAAM,SAAUC,qBAAV,CAAgCC,EAAhC,EAGc;EAHpB;;MACEC,GAAG;MACHC,MAAM,aACY,CAClB;;EACA,IAAIC,KAAJ;;EACA,IAAI,aAAaC,IAAb,CAAkBH,GAAlB,CAAJ,EAA4B;IAC1BE,KAAK,GAAG,yDAAR;EACD;;EACD,IAAI,CAACF,GAAG,CAACI,QAAJ,CAAa,SAAb,CAAL,EAA8B;IAC5BF,KAAK,GACH,gFADF;EAED;;EACD,IAAIF,GAAG,CAACI,QAAJ,CAAa,eAAb,KAAiC,CAACJ,GAAG,CAACI,QAAJ,CAAa,MAAb,CAAtC,EAA4D;IAC1DF,KAAK,GACH,gJADF;EAED,CAbiB,CAelB;;;EACA,IAAMG,SAAS,GAAG,IAAIT,GAAJ,CAAQI,GAAR,CAAlB;EACA,IAAMM,MAAM,GAAGD,SAAS,CAACC,MAAV,EAAf;EACA,IAAMC,QAAQ,GAAGF,SAAS,CAACG,IAAV,EAAjB;EACA,IAAMC,MAAM,GAAGF,QAAQ,CAACG,SAAT,CAAmBH,QAAQ,CAACI,WAAT,CAAqB,GAArB,IAA4B,CAA/C,CAAf;EAEQ,SAAK,GAAKhB,aAAa,GAAEiB,KAAzB;;EAER,IAAMC,eAAe,GAAG,UACtBL,IADsB,EAEtBM,OAFsB,EAEM;IAAA;;;;;YAE5B,IAAIZ,KAAJ,EAAW;cACT,MAAM,IAAIa,KAAJ,CAAUb,KAAV,CAAN;YACD;;YACOc,UAAU,GAAiCf,MAAM,WAAjD,EAAYgB,aAAa,GAAkBhB,MAAM,cAAjD,EAA2BiB,WAAW,GAAKjB,MAAM,YAAjD;kBACJK,MAAM,IAAIG,SAAV;YAAA;YAAA;YACIU,QAAQ,GAAG,IAAIvB,GAAJ,CAAQU,MAAR,EACdc,MADc,CACPN,OADO,EAEdN,IAFc,CAETC,MAAM,GAAGD,IAFA,EAGda,QAHc,EAAX;YAIGC,CAAC,GAAG,CAAJ;;;;kBAAOA,CAAC,GAAGN,UAAU,GAAG,IAAC;YAAA;YAAA;YACf;YAAA;YAAA,EAAMJ,KAAK,CAACO,QAAD,CAAX;;;YAAXI,QAAQ,GAAGxB,SAAX;YACEyB,WAAWD,QAAQ,OAAnB;;YACR,QAAQC,QAAR;cACE,KAAK,GAAL;gBACE;gBAAA;gBAAA,EAAOD,QAAQ,CAACE,IAAT,EAAP;;cACF,KAAK,GAAL;gBACE;;cACF;gBACE,MAAM,IAAIV,KAAJ,CAAUQ,QAAQ,CAACG,MAAT,GAAkB,GAAlB,GAAwBH,QAAQ,CAACI,UAA3C,CAAN;YANJ;;YAQA;YAAA;YAAA,EAAM9B,KAAK,CAACoB,aAAa,IAAKC,WAAW,GAAGU,IAAI,CAACC,MAAL,EAAf,GAAgC,CAApC,CAAd,CAAX;;;YAAA9B;;;;;YAXkCuB,CAAC;;;;;;YAarC,MAAM,IAAIP,KAAJ,CACJ,uBAAoBC,UAAU,GAAG,CAAjC,IAAkC,wBAD9B,CAAN;;;YAIF;YAAA;YAAA,EAAOc,OAAO,CAACC,OAAR,EAAP;;;KA5B4B;EA6B7B,CA/BD;;EAiCA,OAAO;IACLlB,eAAe;EADV,CAAP;AAGD","names":["fetchPonyfill","URI","delay","makeRestPayloadSender","_a","url","config","error","test","includes","urlObject","origin","pathname","path","apiKey","substring","lastIndexOf","fetch","sendRestPayload","payload","Error","maxRetries","retryInterval","retryJitter","endpoint","search","toString","i","response","status_1","json","status","statusText","Math","random","Promise","resolve"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/@alch/alchemy-web3/src/web3-adapter/sendRestPayload.ts"],"sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { FullConfig } from \"../types\";\nimport { delay } from \"../util/promises\";\n\nexport interface RestPayloadSender {\n  sendRestPayload: SendRestPayloadFunction;\n}\n\nexport type SendRestPayloadFunction = (\n  path: string,\n  payload: Record<string, any>,\n) => Promise<any>;\n\nexport interface RestPayloadConfig {\n  url: string;\n  config: FullConfig;\n}\n\nexport function makeRestPayloadSender({\n  url,\n  config,\n}: RestPayloadConfig): RestPayloadSender {\n  // The rest payload sender only works for alchemy.com http endpoints.\n  let error: string | undefined;\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n  if (!url.includes(\"alchemy\")) {\n    error =\n      \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error =\n      \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  }\n\n  // Don't use the native `URL` class for this. It doesn't work in React Native.\n  const urlObject = new URI(url);\n  const origin = urlObject.origin();\n  const pathname = urlObject.path();\n  const apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n\n  const { fetch } = fetchPonyfill();\n\n  const sendRestPayload = async (\n    path: string,\n    payload: Record<string, any>,\n  ): Promise<any> => {\n    if (error) {\n      throw new Error(error);\n    }\n    const { maxRetries, retryInterval, retryJitter } = config;\n    if (origin && apiKey) {\n      const endpoint = new URI(origin)\n        .search(payload)\n        .path(apiKey + path)\n        .toString();\n      for (let i = 0; i < maxRetries + 1; i++) {\n        const response = await fetch(endpoint);\n        const { status } = response;\n        switch (status) {\n          case 200:\n            return response.json();\n          case 429:\n            break;\n          default:\n            throw new Error(response.status + \":\" + response.statusText);\n        }\n        await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n      }\n      throw new Error(\n        `Rate limited for ${maxRetries + 1} consecutive attempts.`,\n      );\n    }\n    return Promise.resolve();\n  };\n\n  return {\n    sendRestPayload,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
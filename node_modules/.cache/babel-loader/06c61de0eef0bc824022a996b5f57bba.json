{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport assertNever from \"assert-never\";\nimport { delay, promisify } from \"../util/promises\";\nvar ALCHEMY_DISALLOWED_METHODS = [\"eth_accounts\", \"eth_sendTransaction\", \"eth_sign\", \"eth_signTypedData_v3\", \"eth_signTypedData\"];\nvar ALCHEMY_DISALLOWED_PREFIXES = [\"personal\"];\nexport function makeJsonRpcPayloadSender(alchemySendJsonRpc, config) {\n  // Copy middlewares from config.\n  var middlewares = [];\n  config.jsonRpcSenderMiddlewares.forEach(function (m) {\n    return middlewares.push(m);\n  });\n  var currentWriteProvider = config.writeProvider;\n  middlewares.push(function (payload) {\n    var disallowedMethod = getDisallowedMethod(payload);\n\n    if (!disallowedMethod) {\n      try {\n        return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n\n        try {\n          return sendJsonRpcWithProvider(currentWriteProvider, payload);\n        } catch (_a) {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\"No provider available for method \\\"\" + disallowedMethod + \"\\\"\");\n      }\n\n      return sendJsonRpcWithProvider(currentWriteProvider, payload);\n    }\n  });\n\n  var sendJsonRpcPayload = function (payload) {\n    var getNext = function (i) {\n      var middleware = middlewares[i];\n      return function () {\n        return middleware(payload, getNext(i + 1));\n      };\n    };\n\n    return getNext(0)();\n  };\n\n  function setWriteProvider(writeProvider) {\n    currentWriteProvider = writeProvider !== null && writeProvider !== void 0 ? writeProvider : null;\n  }\n\n  return {\n    sendJsonRpcPayload: sendJsonRpcPayload,\n    setWriteProvider: setWriteProvider\n  };\n}\n\nfunction sendJsonRpcWithProvider(provider, payload) {\n  var anyProvider = provider;\n  var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);\n  return promisify(function (callback) {\n    return sendMethod(payload, callback);\n  });\n}\n\nfunction getDisallowedMethod(payload) {\n  var payloads = Array.isArray(payload) ? payload : [payload]; // Check if the payload method is a disallowed method or starts with a\n  // disallowed prefix.\n\n  var disallowedRequest = payloads.find(function (p) {\n    return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 || ALCHEMY_DISALLOWED_PREFIXES.some(function (prefix) {\n      return p.method.startsWith(prefix);\n    });\n  }) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nfunction sendJsonRpcWithRetries(payload, alchemySendJsonRpc, _a) {\n  var maxRetries = _a.maxRetries,\n      retryInterval = _a.retryInterval,\n      retryJitter = _a.retryJitter;\n  return __awaiter(this, void 0, void 0, function () {\n    var i, result, status_1, message, statusString;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          i = 0;\n          _b.label = 1;\n\n        case 1:\n          if (!(i < maxRetries + 1)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , alchemySendJsonRpc(payload)];\n\n        case 2:\n          result = _b.sent();\n\n          switch (result.type) {\n            case \"jsonrpc\":\n              return [2\n              /*return*/\n              , result.response];\n\n            case \"rateLimit\":\n              break;\n\n            case \"networkError\":\n              {\n                status_1 = result.status, message = result.message;\n                statusString = status_1 !== 0 ? \"(\" + status_1 + \") \" : \"\";\n                throw new Error(statusString + \" \" + message);\n              }\n\n            default:\n              return [2\n              /*return*/\n              , assertNever(result)];\n          }\n\n          return [4\n          /*yield*/\n          , delay(retryInterval + (retryJitter * Math.random() | 0))];\n\n        case 3:\n          _b.sent();\n\n          _b.label = 4;\n\n        case 4:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 5:\n          throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["assertNever","delay","promisify","ALCHEMY_DISALLOWED_METHODS","ALCHEMY_DISALLOWED_PREFIXES","makeJsonRpcPayloadSender","alchemySendJsonRpc","config","middlewares","jsonRpcSenderMiddlewares","forEach","m","push","currentWriteProvider","writeProvider","payload","disallowedMethod","getDisallowedMethod","sendJsonRpcWithRetries","alchemyError","sendJsonRpcWithProvider","Error","sendJsonRpcPayload","getNext","i","middleware","setWriteProvider","provider","anyProvider","sendMethod","sendAsync","send","bind","callback","payloads","Array","isArray","disallowedRequest","find","p","indexOf","method","some","prefix","startsWith","undefined","_a","maxRetries","retryInterval","retryJitter","result","_b","type","response","status_1","message","statusString","Math","random"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/@alch/alchemy-web3/src/web3-adapter/sendJsonRpcPayload.ts"],"sourcesContent":["import assertNever from \"assert-never\";\nimport {\n  FullConfig,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  JsonRpcSenderMiddleware,\n  Provider,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n} from \"../types\";\nimport { delay, promisify } from \"../util/promises\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst ALCHEMY_DISALLOWED_METHODS: string[] = [\n  \"eth_accounts\",\n  \"eth_sendTransaction\",\n  \"eth_sign\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData\",\n];\n\nconst ALCHEMY_DISALLOWED_PREFIXES: string[] = [\"personal\"];\n\nexport interface JsonRpcPayloadSender {\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction;\n  setWriteProvider(writeProvider: Provider | null | undefined): void;\n}\n\nexport interface SendJsonRpcPayloadFunction {\n  (payload: JsonRpcRequest): Promise<JsonRpcResponse>;\n  (payload: SingleOrBatchRequest): Promise<SingleOrBatchResponse>;\n}\n\nexport function makeJsonRpcPayloadSender(\n  alchemySendJsonRpc: AlchemySendJsonRpcFunction,\n  config: FullConfig,\n): JsonRpcPayloadSender {\n  // Copy middlewares from config.\n  const middlewares: JsonRpcSenderMiddleware[] = [];\n  config.jsonRpcSenderMiddlewares.forEach((m) => middlewares.push(m));\n\n  let currentWriteProvider = config.writeProvider;\n  middlewares.push((payload) => {\n    const disallowedMethod = getDisallowedMethod(payload);\n    if (!disallowedMethod) {\n      try {\n        return sendJsonRpcWithRetries(payload, alchemySendJsonRpc, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n        try {\n          return sendJsonRpcWithProvider(currentWriteProvider, payload);\n        } catch {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\n          `No provider available for method \"${disallowedMethod}\"`,\n        );\n      }\n      return sendJsonRpcWithProvider(currentWriteProvider, payload);\n    }\n  });\n\n  const sendJsonRpcPayload = (\n    payload: SingleOrBatchRequest,\n  ): Promise<SingleOrBatchResponse> => {\n    const getNext = (i: number) => {\n      const middleware = middlewares[i];\n      return () => middleware(payload, getNext(i + 1));\n    };\n    return getNext(0)();\n  };\n\n  function setWriteProvider(writeProvider: Provider | null | undefined) {\n    currentWriteProvider = writeProvider ?? null;\n  }\n\n  return {\n    sendJsonRpcPayload: sendJsonRpcPayload as SendJsonRpcPayloadFunction,\n    setWriteProvider,\n  };\n}\n\nfunction sendJsonRpcWithProvider(\n  provider: Provider,\n  payload: SingleOrBatchRequest,\n): Promise<SingleOrBatchResponse> {\n  const anyProvider: any = provider;\n  const sendMethod = (\n    anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send\n  ).bind(anyProvider);\n  return promisify((callback) => sendMethod(payload, callback));\n}\n\nfunction getDisallowedMethod(\n  payload: SingleOrBatchRequest,\n): string | undefined {\n  const payloads = Array.isArray(payload) ? payload : [payload];\n\n  // Check if the payload method is a disallowed method or starts with a\n  // disallowed prefix.\n  const disallowedRequest =\n    payloads.find(\n      (p) =>\n        ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0 ||\n        ALCHEMY_DISALLOWED_PREFIXES.some((prefix) =>\n          p.method.startsWith(prefix),\n        ),\n    ) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nasync function sendJsonRpcWithRetries(\n  payload: SingleOrBatchRequest,\n  alchemySendJsonRpc: AlchemySendJsonRpcFunction,\n  { maxRetries, retryInterval, retryJitter }: FullConfig,\n): Promise<SingleOrBatchResponse> {\n  for (let i = 0; i < maxRetries + 1; i++) {\n    const result = await alchemySendJsonRpc(payload);\n    switch (result.type) {\n      case \"jsonrpc\":\n        return result.response;\n      case \"rateLimit\":\n        break;\n      case \"networkError\": {\n        const { status, message } = result;\n        const statusString = status !== 0 ? `(${status}) ` : \"\";\n        throw new Error(`${statusString} ${message}`);\n      }\n      default:\n        return assertNever(result);\n    }\n    await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n  }\n  throw new Error(`Rate limited for ${maxRetries + 1} consecutive attempts.`);\n}\n"]},"metadata":{},"sourceType":"module"}
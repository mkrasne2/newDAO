{"ast":null,"code":"import { useCallback as t } from \"react\";\nimport e from \"zustand\";\nimport { redux as o } from \"zustand/middleware\";\n\nconst r = (t, e) => {\n  if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n},\n      n = o => {\n  const n = e(() => o),\n        s = Object.keys(o),\n        a = (t, e) => {\n    \"production\" !== process.env.NODE_ENV && r(s, t), n.setState(o => {\n      return {\n        [t]: (r = o[t], n = e, \"function\" == typeof n ? n(r) : n)\n      };\n      var r, n;\n    });\n  };\n\n  return {\n    useGlobalState: e => {\n      \"production\" !== process.env.NODE_ENV && r(s, e);\n      const o = t(t => t[e], [e]);\n      return [n(o), t(t => a(e, t), [e])];\n    },\n    getGlobalState: t => (\"production\" !== process.env.NODE_ENV && r(s, t), n.getState()[t]),\n    setGlobalState: a\n  };\n},\n      s = function (r) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : r(void 0, {\n    type: void 0\n  });\n  let a = arguments.length > 2 ? arguments[2] : undefined;\n  if (a) return a(s)(r, n);\n\n  const i = e(o(r, n)),\n        u = Object.keys(n),\n        c = e => {\n    \"production\" !== process.env.NODE_ENV && ((t, e) => {\n      if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n    })(u, e);\n    const o = t(t => t[e], [e]);\n    return i(o);\n  };\n\n  return {\n    useStoreState: c,\n    useGlobalState: e => (\"production\" !== process.env.NODE_ENV && console.warn(\"[DEPRECATED] useStoreState instead\"), [c(e), t(t => {\n      i.setState(o => {\n        return {\n          [e]: (r = o[e], n = t, \"function\" == typeof n ? n(r) : n)\n        };\n        var r, n;\n      });\n    }, [e])]),\n    getState: i.getState,\n    dispatch: i.dispatch\n  };\n};\n\nexport { n as createGlobalState, s as createStore };","map":{"version":3,"mappings":"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","names":["validateStateKey","keys","stateKey","includes","Error","createGlobalState","initialState","useStore","create","Object","setGlobalState","update","process","env","NODE_ENV","setState","previousState","oldValue","newValue","useGlobalState","selector","useCallback","state","u","getGlobalState","getState","createStore","reducer","enhancer","undefined","type","redux","useStoreState","console","warn","dispatch"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/react-hooks-global-state/src/createGlobalState.ts","/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/react-hooks-global-state/src/createStore.ts"],"sourcesContent":["import { SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global state.\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State extends object>(initialState: State) => {\n  const useStore = create<State>(() => initialState);\n\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    useStore.setState((previousState) => ({\n      [stateKey]: updateValue(previousState[stateKey], update),\n    } as Pick<State, StateKey> as Partial<State>));\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback((state: State) => state[stateKey], [stateKey]);\n    const partialState = useStore(selector);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return useStore.getState()[stateKey];\n  };\n\n  return {\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n  };\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport { Reducer, SetStateAction, useCallback } from 'react';\n\nimport create from 'zustand';\nimport { redux } from 'zustand/middleware';\n\ntype ExtractState<S> = S extends {\n  getState: () => infer T;\n} ? T : never;\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => (\n  isFunction(newValue) ? newValue(oldValue) : newValue\n);\n\n/**\n * Create a global store.\n *\n * It returns a set of functions\n * - `useStoreState`: a custom hook to read store state by key\n * - `getState`: a function to get store state by key outside React\n * - `dispatch`: a function to dispatch an action to store\n *\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useStoreState, dispatch } = store;\n *\n * const Component = () => {\n *   const count = useStoreState('count');\n *   ...\n * };\n */\nexport const createStore = <State extends object, Action extends { type: unknown }>(\n  reducer: Reducer<State, Action>,\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: any,\n): Store<State, Action> => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState);\n\n  const useStore = create(redux(reducer, initialState));\n\n  type BoundState = ExtractState<typeof useStore>;\n  type StateKeys = keyof BoundState;\n  const keys = Object.keys(initialState);\n\n  const useStoreState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const selector = useCallback(\n      (state: BoundState) => state[stateKey],\n      [stateKey],\n    );\n    return useStore(selector);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      // eslint-disable-next-line no-console\n      console.warn('[DEPRECATED] useStoreState instead');\n    }\n    const partialState = useStoreState(stateKey);\n    const updater = useCallback(\n      (update: SetStateAction<BoundState[StateKey]>) => {\n        useStore.setState((previousState) => ({\n          [stateKey]: updateValue(previousState[stateKey], update),\n        } as Pick<BoundState, StateKey> as Partial<BoundState>));\n      },\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  return {\n    useStoreState,\n    useGlobalState,\n    getState: useStore.getState,\n    dispatch: useStore.dispatch,\n  } as unknown as Store<State, Action>;\n};\n\ntype Store<State, Action> = {\n  useStoreState: <StateKey extends keyof State>(stateKey: StateKey) => State[StateKey];\n  /**\n   * useGlobalState created by createStore is deprecated.\n   *\n   * @deprecated useStoreState instead\n   */\n  useGlobalState: <StateKey extends keyof State>(stateKey: StateKey) => readonly [\n    State[StateKey],\n    (u: SetStateAction<State[StateKey]>) => void,\n  ];\n  getState: () => State;\n  dispatch: (action: Action) => Action;\n};\n"]},"metadata":{},"sourceType":"module"}
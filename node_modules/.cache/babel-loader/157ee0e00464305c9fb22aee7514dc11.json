{"ast":null,"code":"var _jsxFileName = \"/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/src/components/About.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport { MDBRow, MDBCol, MDBInput, MDBCheckbox, MDBBtn, MDBTextArea } from 'mdb-react-ui-kit';\nimport { ethers } from \"ethers\";\nimport abi from \"./abi.json\";\nimport DateTimePicker from 'react-datetime-picker';\nimport Navbar from './Navbar.js';\nimport LoadingSpin from \"react-loading-spin\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Aboutus() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"About Us\",\n      message: \"A little bit about the specifications of this test DAO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"I built this test DAO as a means of teaching myself the basics of React.js for use as a basic interface to read and write transactions to a decentralized autonomous organization (DAO).  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 37\n      }, this), \"Here are a few specifications I used to enable DAO participation, as well as how I chose to connect my frontend to the blockchain:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Contract Specifications:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"My contract utilizes an interface with OpenSea's ERC-1155 token contract on Polygon Mumbai testnet. As such, my DAO operates off a membership model of a total of 15 limited-supply tokens, each enabling DAO members 1 vote per token.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"My contract allows a given token holder to submit votes both in favor and disapproval of proposals (in the event that the token holder has more than 1 token).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the contract has no payable functions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The contract requires that proposal submissions come with a deadline that gives token owners at least 1 full day to vote, but no more than 4 weeks.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The contract also allows the owner of the contract the ability to add additional tokens in the future.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"I deployed the contract to the Polygon Mumbai testnet using HardHat on my local device.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Frontend Specifications:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"I chose to use Ethers.js to enable the frontend to talk to the blockchain.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"My contract allows a given token holder to submit votes both in favor and disapproval of proposals (in the event that the token holder has more than 1 token).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the contract has no payable functions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The contract requires that proposal submissions come with a deadline that gives token owners at least 1 full day to vote, but no more than 4 weeks.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The contract also allows the owner of the contract the ability to add additional tokens in the future.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_c = Aboutus;\n\nvar _c;\n\n$RefreshReg$(_c, \"Aboutus\");","map":{"version":3,"names":["React","Component","useEffect","useState","MDBRow","MDBCol","MDBInput","MDBCheckbox","MDBBtn","MDBTextArea","ethers","abi","DateTimePicker","Navbar","LoadingSpin","detectEthereumProvider","Aboutus"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/src/components/About.js"],"sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport {\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBCheckbox,\n  MDBBtn,\n  MDBTextArea\n} from 'mdb-react-ui-kit';\nimport { ethers } from \"ethers\";\nimport abi from \"./abi.json\";\nimport DateTimePicker from 'react-datetime-picker';\nimport Navbar from './Navbar.js';\nimport LoadingSpin from \"react-loading-spin\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nexport default function Aboutus () {\n\n\n\n\n\n  return (\n    <>\n    <Navbar\n  title=\"About Us\"\n  message=\"A little bit about the specifications of this test DAO\" />\n    <p >\n    I built this test DAO as a means of teaching myself the basics of React.js \n    for use as a basic interface to read and write transactions to a decentralized \n    autonomous organization (DAO).  <br></br>\n\n    Here are a few specifications I used to enable DAO participation, as well as how I chose to connect my frontend to the blockchain:\n    <br></br>\n    <br></br>\n    <ul> <strong>Contract Specifications:</strong>\n    <li>My contract utilizes an interface with OpenSea's ERC-1155 token contract on Polygon Mumbai testnet.\n      As such, my DAO operates off a membership model of a total of 15 limited-supply tokens, each enabling\n      DAO members 1 vote per token.\n    </li>\n    <li>My contract allows a given token holder to submit votes both in favor and disapproval of proposals \n      (in the event that the token holder has more than 1 token).\n    </li>\n    <li>My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the\n      contract has no payable functions.\n    </li>\n    <li>The contract requires that proposal submissions come with a deadline that gives token owners at least\n      1 full day to vote, but no more than 4 weeks.\n    </li>\n    <li>The contract also allows the owner of the contract the ability to add additional tokens in the future.\n    </li>\n    <li>I deployed the contract to the Polygon Mumbai testnet using HardHat on my local device.\n    </li>\n    </ul>\n    <br></br>\n    <br></br>\n\n    <ul> <strong>Frontend Specifications:</strong>\n    <li>I chose to use Ethers.js to enable the frontend to talk to the blockchain.\n    </li>\n    <li>My contract allows a given token holder to submit votes both in favor and disapproval of proposals \n      (in the event that the token holder has more than 1 token).\n    </li>\n    <li>My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the\n      contract has no payable functions.\n    </li>\n    <li>The contract requires that proposal submissions come with a deadline that gives token owners at least\n      1 full day to vote, but no more than 4 weeks.\n    </li>\n    <li>The contract also allows the owner of the contract the ability to add additional tokens in the future.\n      \n    </li>\n    </ul>\n  </p>\n  \n  </>\n  )\n\n}"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,SACEC,MADF,EAEEC,MAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,MALF,EAMEC,WANF,QAOO,kBAPP;AAQA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;;AAEA,eAAe,SAASC,OAAT,GAAoB;EAMjC,oBACE;IAAA,wBACA,QAAC,MAAD;MACF,KAAK,EAAC,UADJ;MAEF,OAAO,EAAC;IAFN;MAAA;MAAA;MAAA;IAAA,QADA,eAIA;MAAA,sNAGgC;QAAA;QAAA;QAAA;MAAA,QAHhC,qJAMA;QAAA;QAAA;QAAA;MAAA,QANA,eAOA;QAAA;QAAA;QAAA;MAAA,QAPA,eAQA;QAAA,6BAAK;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAL,eACA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,eAKA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QALA,eAQA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QARA,eAWA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAXA,eAcA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAdA,eAgBA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAhBA;MAAA;QAAA;QAAA;QAAA;MAAA,QARA,eA2BA;QAAA;QAAA;QAAA;MAAA,QA3BA,eA4BA;QAAA;QAAA;QAAA;MAAA,QA5BA,eA8BA;QAAA,6BAAK;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAL,eACA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADA,eAGA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAHA,eAMA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QANA,eASA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QATA,eAYA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAZA;MAAA;QAAA;QAAA;QAAA;MAAA,QA9BA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJA;EAAA,gBADF;AAwDD;KA9DuBA,O"},"metadata":{},"sourceType":"module"}
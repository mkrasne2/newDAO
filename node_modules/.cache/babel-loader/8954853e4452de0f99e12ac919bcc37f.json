{"ast":null,"code":"import React,{Component,useEffect,useState}from'react';import{MDBRow,MDBCol,MDBInput,MDBCheckbox,MDBBtn,MDBTextArea}from'mdb-react-ui-kit';import{ethers}from\"ethers\";import abi from\"./abi.json\";import DateTimePicker from'react-datetime-picker';import Navbar from'./Navbar.js';import LoadingSpin from\"react-loading-spin\";import detectEthereumProvider from'@metamask/detect-provider';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function Aboutus(){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{title:\"About This DAO\",message:\"A little bit about the specifications of this test DAO\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"I built this test DAO as a means of teaching myself the basics of React.js for use as a basic interface to read and write transactions to a decentralized autonomous organization (DAO).  \",/*#__PURE__*/_jsx(\"br\",{}),\"Here are a few specifications I used to enable DAO participation, as well as how I chose to connect my frontend to the blockchain:\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"ul\",{children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\"Contract Specifications:\"}),/*#__PURE__*/_jsx(\"li\",{children:\"My contract utilizes an interface with OpenSea's ERC-1155 token contract on Polygon Mumbai testnet. As such, my DAO operates off a membership model of a total of 15 limited-supply tokens, each enabling DAO members 1 vote per token.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"My contract allows a given token holder to submit votes both in favor and disapproval of proposals (in the event that the token holder has more than 1 token). This might be a little strange, but I wanted token holders to have full autonomy over their decision-making behavior, regardless of how odd they might be.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the contract has no payable functions.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The contract requires that proposal submissions come with a deadline that gives token owners at least 1 full day to vote, but no more than 4 weeks.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"The contract also allows the owner of the contract the ability to add additional tokens in the future.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"I deployed the contract to the Polygon Mumbai testnet using HardHat on my local device.\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"ul\",{children:[\" \",/*#__PURE__*/_jsx(\"strong\",{children:\"Frontend Specifications:\"}),/*#__PURE__*/_jsx(\"li\",{children:\"I chose to use Ethers.js to enable the frontend to talk to the blockchain.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Given MetaMask phasing out certain functions that previously made it easier to detect if a user was already connected to the app, I found it difficult to automatically render blockchain data to users who were already connected without auto-prompting users who are not signed in to sign in. I unfortunately settled for the auto-prompt option.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"I had originally toyed with using an Infura or Moralis free node to serve data through the RPC provider option, but I found myself running out of API bandwidth using the free options.\"})]})]})]});}","map":{"version":3,"names":["React","Component","useEffect","useState","MDBRow","MDBCol","MDBInput","MDBCheckbox","MDBBtn","MDBTextArea","ethers","abi","DateTimePicker","Navbar","LoadingSpin","detectEthereumProvider","Aboutus"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/src/components/About.js"],"sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport {\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBCheckbox,\n  MDBBtn,\n  MDBTextArea\n} from 'mdb-react-ui-kit';\nimport { ethers } from \"ethers\";\nimport abi from \"./abi.json\";\nimport DateTimePicker from 'react-datetime-picker';\nimport Navbar from './Navbar.js';\nimport LoadingSpin from \"react-loading-spin\";\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nexport default function Aboutus () {\n\n\n\n\n\n  return (\n    <>\n    <Navbar\n  title=\"About This DAO\"\n  message=\"A little bit about the specifications of this test DAO\" />\n  <br></br>\n    <p >\n    I built this test DAO as a means of teaching myself the basics of React.js \n    for use as a basic interface to read and write transactions to a decentralized \n    autonomous organization (DAO).  <br></br>\n\n    Here are a few specifications I used to enable DAO participation, as well as how I chose to connect my frontend to the blockchain:\n    <br></br>\n    <br></br>\n    <ul> <strong>Contract Specifications:</strong>\n    <li>My contract utilizes an interface with OpenSea's ERC-1155 token contract on Polygon Mumbai testnet.\n      As such, my DAO operates off a membership model of a total of 15 limited-supply tokens, each enabling\n      DAO members 1 vote per token.\n    </li>\n    <li>My contract allows a given token holder to submit votes both in favor and disapproval of proposals \n      (in the event that the token holder has more than 1 token). This might be a little strange, but I \n      wanted token holders to have full autonomy over their decision-making behavior, regardless of how odd they \n      might be. \n    </li>\n    <li>My DAO contract utilizes SafeMath for added security, though not entirely necessary given that the\n      contract has no payable functions.\n    </li>\n    <li>The contract requires that proposal submissions come with a deadline that gives token owners at least\n      1 full day to vote, but no more than 4 weeks.\n    </li>\n    <li>The contract also allows the owner of the contract the ability to add additional tokens in the future.\n    </li>\n    <li>I deployed the contract to the Polygon Mumbai testnet using HardHat on my local device.\n    </li>\n    </ul>\n    <br></br>\n    <br></br>\n\n    <ul> <strong>Frontend Specifications:</strong>\n    <li>I chose to use Ethers.js to enable the frontend to talk to the blockchain.\n    </li>\n    <li>Given MetaMask phasing out certain functions that previously made it easier to\n      detect if a user was already connected to the app, I found it difficult to \n      automatically render blockchain data to users who were already connected without\n      auto-prompting users who are not signed in to sign in. I unfortunately settled for \n      the auto-prompt option.\n    </li>\n    <li>I had originally toyed with using an Infura or Moralis free node to serve data \n      through the RPC provider option, but I found myself running out of API bandwidth \n      using the free options. \n    </li>\n    \n    </ul>\n  </p>\n  \n  </>\n  )\n\n}"],"mappings":"AAAA,MAAOA,MAAP,EAAgBC,SAAhB,CAA2BC,SAA3B,CAAsCC,QAAtC,KAAsD,OAAtD,CACA,OACEC,MADF,CAEEC,MAFF,CAGEC,QAHF,CAIEC,WAJF,CAKEC,MALF,CAMEC,WANF,KAOO,kBAPP,CAQA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,IAAP,KAAgB,YAAhB,CACA,MAAOC,eAAP,KAA2B,uBAA3B,CACA,MAAOC,OAAP,KAAmB,aAAnB,CACA,MAAOC,YAAP,KAAwB,oBAAxB,CACA,MAAOC,uBAAP,KAAmC,2BAAnC,C,6IAEA,cAAe,SAASC,QAAT,EAAoB,CAMjC,mBACE,wCACA,KAAC,MAAD,EACF,KAAK,CAAC,gBADJ,CAEF,OAAO,CAAC,wDAFN,EADA,cAIF,aAJE,cAKA,+NAGgC,aAHhC,mJAMA,aANA,cAOA,aAPA,cAQA,uCAAK,oDAAL,cACA,+PADA,cAKA,iVALA,cAUA,6JAVA,cAaA,2KAbA,cAgBA,8HAhBA,cAkBA,+GAlBA,GARA,cA6BA,aA7BA,cA8BA,aA9BA,cAgCA,uCAAK,oDAAL,cACA,kGADA,cAGA,6WAHA,cASA,+MATA,GAhCA,GALA,GADF,CA0DD"},"metadata":{},"sourceType":"module"}
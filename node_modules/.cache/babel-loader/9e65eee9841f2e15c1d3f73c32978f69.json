{"ast":null,"code":"const e = Symbol(),\n      t = Symbol(),\n      r = Symbol(),\n      n = Object.getPrototypeOf,\n      o = new WeakMap(),\n      s = e => e && (o.has(e) ? o.get(e) : n(e) === Object.prototype || n(e) === Array.prototype),\n      c = e => \"object\" == typeof e && null !== e,\n      i = (n, o) => {\n  let s = !1;\n\n  const c = (t, r, o) => {\n    if (!s) {\n      let s = t.a.get(n);\n      s || (s = new Set(), t.a.set(n, s)), o && s.has(e) || s.add(r);\n    }\n  },\n        i = {\n    f: o,\n\n    get(e, t) {\n      return t === r ? n : (c(this, t), a(e[t], this.a, this.c));\n    },\n\n    has(e, r) {\n      return r === t ? (s = !0, this.a.delete(n), !0) : (c(this, r), r in e);\n    },\n\n    getOwnPropertyDescriptor(e, t) {\n      return c(this, t, !0), Object.getOwnPropertyDescriptor(e, t);\n    },\n\n    ownKeys(t) {\n      return c(this, e), Reflect.ownKeys(t);\n    }\n\n  };\n\n  return o && (i.set = i.deleteProperty = () => !1), i;\n},\n      a = (e, t, o) => {\n  if (!s(e)) return e;\n\n  const c = e[r] || e,\n        a = (e => Object.isFrozen(e) || Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.writable))(c);\n\n  let l = o && o.get(c);\n  return l && l.f === a || (l = i(c, a), l.p = new Proxy(a ? (e => {\n    if (Array.isArray(e)) return Array.from(e);\n    const t = Object.getOwnPropertyDescriptors(e);\n    return Object.values(t).forEach(e => {\n      e.configurable = !0;\n    }), Object.create(n(e), t);\n  })(c) : c, l), o && o.set(c, l)), l.a = t, l.c = o, l.p;\n},\n      l = (e, t) => {\n  const r = Reflect.ownKeys(e),\n        n = Reflect.ownKeys(t);\n  return r.length !== n.length || r.some((e, t) => e !== n[t]);\n},\n      u = (t, r, n, o) => {\n  if (Object.is(t, r)) return !1;\n  if (!c(t) || !c(r)) return !0;\n  const s = n.get(t);\n  if (!s) return !0;\n\n  if (o) {\n    const e = o.get(t);\n    if (e && e.n === r) return e.g;\n    o.set(t, {\n      n: r,\n      g: !1\n    });\n  }\n\n  let i = null;\n\n  for (const c of s) {\n    const s = c === e ? l(t, r) : u(t[c], r[c], n, o);\n    if (!0 !== s && !1 !== s || (i = s), i) break;\n  }\n\n  return null === i && (i = !0), o && o.set(t, {\n    n: r,\n    g: i\n  }), i;\n},\n      f = e => !!s(e) && t in e,\n      y = e => s(e) && e[r] || null,\n      p = function (e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n  o.set(e, t);\n},\n      g = (e, t) => {\n  const r = [],\n        n = new WeakSet(),\n        o = (e, s) => {\n    if (n.has(e)) return;\n    c(e) && n.add(e);\n    const i = t.get(e);\n    i ? i.forEach(t => {\n      o(e[t], s ? [...s, t] : [t]);\n    }) : s && r.push(s);\n  };\n\n  return o(e), r;\n};\n\nexport { g as affectedToPathList, a as createProxy, y as getUntracked, u as isChanged, p as markToTrack, f as trackMemo };","map":{"version":3,"mappings":"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","names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","isObjectToTrack","obj","has","get","prototype","Array","isObject","x","createProxyHandler","origObj","frozen","trackObject","recordUsage","h","key","skipWithOwnKeys","used","a","Set","set","add","handler","f","target","this","createProxy","delete","getOwnPropertyDescriptor","ownKeys","Reflect","deleteProperty","affected","proxyCache","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","proxyHandler","p","Proxy","isArray","from","descriptors","forEach","desc","configurable","create","c","isOwnKeysChanged","nextObj","origKeys","nextKeys","length","k","i","isChanged","cache","is","hit","n","g","changed","trackMemo","getUntracked","markToTrack","mark","affectedToPathList","list","seen","WeakSet","walk","path","push"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/proxy-compare/src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfreeze = (obj: object) => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj);\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object>;\n  [AFFECTED_PROPERTY]?: Affected;\n  get(target: T, key: string | symbol): unknown;\n  has(target: T, key: string | symbol): boolean;\n  getOwnPropertyDescriptor(target: T, key: string | symbol): PropertyDescriptor | undefined;\n  ownKeys(target: T): (string | symbol)[];\n  set?(target: T, key: string | symbol, value: unknown): boolean;\n  deleteProperty?(target: T, key: string | symbol): boolean;\n};\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  let trackObject = false; // for trackMemo\n  const recordUsage = (h: ProxyHandler<T>, key: string | symbol, skipWithOwnKeys?: boolean) => {\n    if (!trackObject) {\n      let used = (h[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (h[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (!skipWithOwnKeys || !used.has(OWN_KEYS_SYMBOL)) {\n        used.add(key);\n      }\n    }\n  };\n  const recordObjectAsUsed = (h: ProxyHandler<T>) => {\n    trackObject = true;\n    (h[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    [FROZEN_PROPERTY]: frozen,\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(this, key);\n      return createProxy(\n        (target as any)[key],\n        (this[AFFECTED_PROPERTY] as Affected),\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed(this);\n        return true;\n      }\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `'a' in obj` is handled.\n      recordUsage(this, key);\n      return key in target;\n    },\n    getOwnPropertyDescriptor(target, key) {\n      // LIMITATION: We simply record the same as `get`.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if `obj.getOwnPropertyDescriptor('a'))` is handled.\n      recordUsage(this, key, true);\n      return Object.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(this, OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return handler;\n};\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const origObj = (\n    obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj }\n  )[GET_ORIGINAL_SYMBOL]; // unwrap proxy\n  const target = origObj || obj;\n  const frozen = isFrozen(target);\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler || proxyHandler[FROZEN_PROPERTY] !== frozen) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>(target, frozen);\n    proxyHandler[PROXY_PROPERTY] = new Proxy(\n      frozen ? unfreeze(target) : target,\n      proxyHandler,\n    ) as typeof target;\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return proxyHandler[PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (origObj: object, nextObj: object) => {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return origKeys.length !== nextKeys.length\n    || origKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} origObj - The original object to compare.\n * @param {object} nextObj - Object to compare with the original one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.a\n *\n * isChanged(original, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(original, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  origObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(origObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(origObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(origObj);\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(origObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj)\n      : isChanged(\n        (origObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Obejct.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param {object} obj - Object to mark as tracked or not.\n * @param {mark} boolean - Boolean indicating whether you want to track this object or not.\n * @returns {undefined} - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = (affected as Affected).get(x as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function makeJsonRpcPayloadFactory() {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      method: method,\n      params: params,\n      jsonrpc: \"2.0\",\n      id: \"alc-web3:\" + nextId++\n    };\n  };\n}\nexport function makeJsonRpcSenders(sendJsonRpcPayload, makeJsonRpcPayload) {\n  var _this = this;\n\n  var send = function (method, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendJsonRpcPayload(makeJsonRpcPayload(method, params))];\n\n          case 1:\n            response = _a.sent();\n\n            if (response.error) {\n              throw new Error(response.error.message);\n            }\n\n            return [2\n            /*return*/\n            , response.result];\n        }\n      });\n    });\n  };\n\n  function sendBatch(parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, response, message, errorResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = parts.map(function (_a) {\n              var method = _a.method,\n                  params = _a.params;\n              return makeJsonRpcPayload(method, params);\n            });\n            return [4\n            /*yield*/\n            , sendJsonRpcPayload(payload)];\n\n          case 1:\n            response = _a.sent();\n\n            if (!Array.isArray(response)) {\n              message = response.error ? response.error.message : \"Batch request failed\";\n              throw new Error(message);\n            }\n\n            errorResponse = response.find(function (r) {\n              return !!r.error;\n            });\n\n            if (errorResponse) {\n              throw new Error(errorResponse.error.message);\n            } // The ids are ascending numbers because that's what Payload Factories do.\n\n\n            return [2\n            /*return*/\n            , response.sort(function (r1, r2) {\n              return r1.id - r2.id;\n            }).map(function (r) {\n              return r.result;\n            })];\n        }\n      });\n    });\n  }\n\n  return {\n    send: send,\n    sendBatch: sendBatch\n  };\n}\nexport function makeResponse(id, result) {\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}","map":{"version":3,"mappings":";AAuBA,OAAM,SAAUA,yBAAV,GAAmC;EACvC,IAAIC,MAAM,GAAG,CAAb;EACA,OAAO,UAACC,MAAD,EAASC,MAAT,EAAe;IAAK,OAAC;MAC1BD,MAAM,QADoB;MAE1BC,MAAM,QAFoB;MAG1BC,OAAO,EAAE,KAHiB;MAI1BC,EAAE,EAAE,cAAYJ,MAAM;IAJI,CAAD;EAKzB,CALF;AAMD;AAED,OAAM,SAAUK,kBAAV,CACJC,kBADI,EAEJC,kBAFI,EAEqC;EAF3C;;EAIE,IAAMC,IAAI,GAAwB,UAAOP,MAAP,EAAeC,MAAf,EAAqB;IAAA;;;;;YACpC;YAAA;YAAA,EAAMI,kBAAkB,CACvCC,kBAAkB,CAACN,MAAD,EAASC,MAAT,CADqB,CAAxB;;;YAAXO,QAAQ,GAAGC,SAAX;;YAGN,IAAID,QAAQ,CAACE,KAAb,EAAoB;cAClB,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACE,KAAT,CAAeE,OAAzB,CAAN;YACD;;YACD;YAAA;YAAA,EAAOJ,QAAQ,CAACK,MAAhB;;;KAPqD;EAQtD,CARD;;EAUA,SAAeC,SAAf,CAAyBC,KAAzB,EAA2C;;;;;;YACnCC,OAAO,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACR,EAAD,EAAmB;kBAAhBT,MAAM;kBAAEC,MAAM;cACzC,yBAAkB,CAACD,MAAD,EAASC,MAAT,CAAlB;YAAkC,CADpB,CAAV;YAGW;YAAA;YAAA,EAAMI,kBAAkB,CAACW,OAAD,CAAxB;;;YAAXR,QAAQ,GAAGC,SAAX;;YACN,IAAI,CAACS,KAAK,CAACC,OAAN,CAAcX,QAAd,CAAL,EAA8B;cACtBI,OAAO,GAAGJ,QAAQ,CAACE,KAAT,GACZF,QAAQ,CAACE,KAAT,CAAeE,OADH,GAEZ,sBAFE;cAGN,MAAM,IAAID,KAAJ,CAAUC,OAAV,CAAN;YACD;;YACKQ,aAAa,GAAGZ,QAAQ,CAACa,IAAT,CAAc,UAACC,CAAD,EAAE;cAAK,QAAC,CAACA,CAAC,CAACZ,KAAJ;YAAS,CAA9B,CAAhB;;YACN,IAAIU,aAAJ,EAAmB;cACjB,MAAM,IAAIT,KAAJ,CAAUS,aAAa,CAACV,KAAd,CAAqBE,OAA/B,CAAN;YACD,EACD;;;YACA;YAAA;YAAA,EAAOJ,QAAQ,CACZe,IADI,CACC,UAACC,EAAD,EAAKC,EAAL,EAAO;cAAK,OAACD,EAAE,CAACrB,EAAH,GAAoBsB,EAAE,CAACtB,EAAxB;YAAqC,CADlD,EAEJc,GAFI,CAEA,UAACK,CAAD,EAAE;cAAK,QAAC,CAACT,MAAF;YAAQ,CAFf,CAAP;;;;EAGD;;EAED,OAAO;IAAEN,IAAI,MAAN;IAAQO,SAAS;EAAjB,CAAP;AACD;AAED,OAAM,SAAUY,YAAV,CAA0BvB,EAA1B,EAAyCU,MAAzC,EAAkD;EACtD,OAAO;IAAEX,OAAO,EAAE,KAAX;IAAkBC,EAAE,IAApB;IAAsBU,MAAM;EAA5B,CAAP;AACD","names":["makeJsonRpcPayloadFactory","nextId","method","params","jsonrpc","id","makeJsonRpcSenders","sendJsonRpcPayload","makeJsonRpcPayload","send","response","_a","error","Error","message","result","sendBatch","parts","payload","map","Array","isArray","errorResponse","find","r","sort","r1","r2","makeResponse"],"sources":["/Users/markkrasner/Downloads/MDB5-REACT-UI-KIT-Free-4.0.0/node_modules/@alch/alchemy-web3/src/util/jsonRpc.ts"],"sourcesContent":["import {\n  JsonRpcId,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SendJsonRpcFunction,\n} from \"../types\";\nimport { SendJsonRpcPayloadFunction } from \"../web3-adapter/sendJsonRpcPayload\";\n\nexport type JsonRpcPayloadFactory = (\n  method: string,\n  params?: any[],\n) => JsonRpcRequest;\n\nexport interface JsonRpcSenders {\n  send: SendJsonRpcFunction;\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\n}\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport function makeJsonRpcPayloadFactory(): JsonRpcPayloadFactory {\n  let nextId = 0;\n  return (method, params) => ({\n    method,\n    params,\n    jsonrpc: \"2.0\",\n    id: `alc-web3:${nextId++}`,\n  });\n}\n\nexport function makeJsonRpcSenders(\n  sendJsonRpcPayload: SendJsonRpcPayloadFunction,\n  makeJsonRpcPayload: JsonRpcPayloadFactory,\n): JsonRpcSenders {\n  const send: SendJsonRpcFunction = async (method, params) => {\n    const response = await sendJsonRpcPayload(\n      makeJsonRpcPayload(method, params),\n    );\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n    return response.result;\n  };\n\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\n    const payload = parts.map(({ method, params }) =>\n      makeJsonRpcPayload(method, params),\n    );\n    const response = await sendJsonRpcPayload(payload);\n    if (!Array.isArray(response)) {\n      const message = response.error\n        ? response.error.message\n        : \"Batch request failed\";\n      throw new Error(message);\n    }\n    const errorResponse = response.find((r) => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map((r) => r.result);\n  }\n\n  return { send, sendBatch };\n}\n\nexport function makeResponse<T>(id: JsonRpcId, result: T): JsonRpcResponse<T> {\n  return { jsonrpc: \"2.0\", id, result };\n}\n"]},"metadata":{},"sourceType":"module"}